#!/usr/bin/python

import time
import yaml
import board
import requests
from digitalio import DigitalInOut, Direction, Pull
import subprocess
from CameraButtons import CameraButtons
import os
import logging
from datetime import datetime

BUTTON_PIN = board.D17
JOYDOWN_PIN = board.D27
JOYLEFT_PIN = board.D22
JOYUP_PIN = board.D23
JOYRIGHT_PIN = board.D24
JOYSELECT_PIN = board.D16
camera_buttons = CameraButtons.CameraButtons()
brain_hat_buttons_settings = {}
HOME_DIR = '/home/pi/brain-hat-button-controller/'

buttons = [BUTTON_PIN, JOYUP_PIN, JOYDOWN_PIN,
           JOYLEFT_PIN, JOYRIGHT_PIN, JOYSELECT_PIN]
for i,pin in enumerate(buttons):
  buttons[i] = DigitalInOut(pin)
  buttons[i].direction = Direction.INPUT
  buttons[i].pull = Pull.UP
button, joyup, joydown, joyleft, joyright, joyselect = buttons
HOME_DIR = "/home/pi/brain-hat-button-controller/"
CONFIG_FILE = HOME_DIR + "conf/brain_hat_buttons.yaml"

def init_logging():
  logging_logger = logging.getLogger(__name__)
  logging_logger.setLevel(logging.DEBUG)
  logging_logger.propagate = False
  # create console handler and set level to info
  handler = logging.StreamHandler()
  handler.setLevel(logging.DEBUG)
  formatter = logging.Formatter("%(asctime)s [brain_hat_buttons] [%(levelname)-5.5s]  %(message)s")
  handler.setFormatter(formatter)
  logging_logger.addHandler(handler)
  return logging_logger

def config():
  global brain_hat_buttons_settings
  config_file = read_config_file()
  # read config dict's into more specific variables
  brain_hat_buttons_settings = {k: v for k, v in config_file['stream'].items()}

def read_config_file():
  # read config yaml file into dictionaries
  config_file = None
  with open(CONFIG_FILE, 'r') as ymlfile:
    config_file = yaml.full_load(ymlfile)
  return config_file

def get_press_length(button, button_name):
  long_pressed = 0
  t_start = datetime.now()
  while not button.value:
    time.sleep(0.01)
  t_end = datetime.now()
  if (t_end - t_start).seconds < 1:
    logger.info(button_name + " pressed")
  else:
    logger.info(button_name + " long-pressed")
    long_pressed = 1
  return long_pressed

def button_check():
  if not button.value:
    camera_buttons.photo_plus_objrecog_handler(get_press_length(button, "Button"))
  if not joyup.value:
    camera_buttons.up_handler(get_press_length(joyup, "Joystick up"))
  if not joydown.value:
    camera_buttons.down_handler(get_press_length(joydown, "Joystick down"))
  if not joyleft.value:
    camera_buttons.left_handler(get_press_length(joyleft, "Joystick left"))
  if not joyright.value:
    camera_buttons.right_handler(get_press_length(joyright, "Joystick right"))
  if not joyselect.value:
    camera_buttons.select_handler(get_press_length(joyselect, "Joystick select"))

def short_or_long_press_func(was_long_press, short_func, long_func):
  if was_long_press:
    logger.debug("Running long function, {0}".format(long_func))
    long_func()
  else:
    logger.debug("Running short function, {0}".format(short_func))
    short_func()
  time.sleep(0.35)

if __name__ == '__main__':
  global logger
  logger = init_logging()
  # config()
  while True:
    button_check()
    time.sleep(0.01)
