#!/usr/bin/python

import time
import board
from digitalio import DigitalInOut, Direction, Pull
import subprocess
import os
import logging
from datetime import datetime

BUTTON_PIN = board.D17
JOYDOWN_PIN = board.D27
JOYLEFT_PIN = board.D22
JOYUP_PIN = board.D23
JOYRIGHT_PIN = board.D24
JOYSELECT_PIN = board.D16
HOME_DIR = '/home/pi/brain-hat-button-controller/'

mode = 'default'
buttons = [BUTTON_PIN, JOYUP_PIN, JOYDOWN_PIN,
           JOYLEFT_PIN, JOYRIGHT_PIN, JOYSELECT_PIN]
for i,pin in enumerate(buttons):
  buttons[i] = DigitalInOut(pin)
  buttons[i].direction = Direction.INPUT
  buttons[i].pull = Pull.UP
button, joyup, joydown, joyleft, joyright, joyselect = buttons
pi_cam_preview_get_pid_str = "ps aux | grep -ivE \"(grep)\" | grep pi_cam_app | awk \'{print $2}\'"
tf_obj_recognition_pid_str = "ps aux | grep -ivE \"(grep|venv)\" | grep pitft_labeled_output.py | awk \'{print $2}\'"

def init_logging():
  logging_logger = logging.getLogger(__name__)
  logging_logger.setLevel(logging.DEBUG)
  logging_logger.propagate = False
  # create console handler and set level to info
  handler = logging.StreamHandler()
  handler.setLevel(logging.INFO)
  formatter = logging.Formatter("%(asctime)s [brain_hat_buttons] [%(levelname)-5.5s]  %(message)s")
  handler.setFormatter(formatter)
  logging_logger.addHandler(handler)
  return logging_logger

def change_mode(new_mode='default'):
  mode = new_mode
  logger.info("Mode changed to " + mode)

def start_tf_obj_recognition():
  pid = get_pid(pi_cam_preview_get_pid_str)
  if pid:
    kill_pid(pid)
  os.environ["DISPLAY"] = ":0"
  subprocess.Popen(HOME_DIR + "tf_obj_recognition")

def start_pi_cam_preview():
  change_mode('camera')
  subprocess.Popen(HOME_DIR + "pi_cam_app")

def video_recorder():
  # TODO: record movie (might need a new script for this that is very similar to pi_cam_app)
  # if already recording a video, then stop, else start recording
  pass

def stopmotion_animation():
  # TODO: make stop motion animation (might need a new script for this that is very similar to pi_cam_app)
  # if already making stop motion animation, then stop, else start recording
  pass

def photo():
  # if already making stop motion animation, then stop, else start recording
  # TODO: if in camera mode, take photo and save to ~/Desktop/images, 
  # elseif in stopmotion mode, add frame ti ~/stopmotion, when done make video and clean up files
  pass

def obj_recognition():
  kill_pid_or_start_func(tf_obj_recognition_pid_str, start_tf_obj_recognition)

def pi_cam_app():
  kill_pid_or_start_func(pi_cam_preview_get_pid_str, start_pi_cam_preview)

def joystick_up_handler(was_long_press):
  short_or_long_press_func(was_long_press, pass_func, shutdown)

def joystick_down_handler(was_long_press):
  short_or_long_press_func(was_long_press, pass_func, stopmotion_animation)

def joystick_left_handler(was_long_press):
  short_or_long_press_func(was_long_press, pass_func, pi_cam_app)

def joystick_right_handler(was_long_press):
  short_or_long_press_func(was_long_press, pass_func, video_recorder)

def joystick_select_handler(was_long_press):
  short_or_long_press_func(was_long_press, pass_func, reboot)

def button_handler(was_long_press):
  short_or_long_press_func(was_long_press, photo, obj_recognition)

def get_press_length(button, button_name):
  long_pressed = 0
  t_start = datetime.now()
  while not button.value:
    time.sleep(0.01)
  t_end = datetime.now()
  if (t_end - t_start).seconds < 1:
    logger.info(button_name + " pressed")
  else:
    logger.info(button_name + " long-pressed")
    long_pressed = 1
  return long_pressed

def button_check():
  if not button.value:
    button_handler(get_press_length(button, "Button"))
  if not joyup.value:
    joystick_up_handler(get_press_length(joyup, "Joystick up"))
  if not joydown.value:
    joystick_down_handler(get_press_length(joydown, "Joystick down"))
  if not joyleft.value:
    joystick_left_handler(get_press_length(joyleft, "Joystick left"))
  if not joyright.value:
    joystick_right_handler(get_press_length(joyright, "Joystick right"))
  if not joyselect.value:
    joystick_select_handler(get_press_length(joyselect, "Joystick select"))

def get_pid(get_pid_cmd_str):
  return subprocess.check_output([get_pid_cmd_str], shell=True).decode().rstrip()

def kill_pid(pid):
  os.system("kill -9 " + str(pid))

def kill_pid_or_start_func(get_pid_str, func):
  pid = get_pid(get_pid_str)
  if pid:
    kill_pid(pid)
    change_mode()
  else:
    func()

def short_or_long_press_func(was_long_press, short_func, long_func):
  if was_long_press:
    long_func()
  else:
    short_func()
  time.sleep(0.35)

def reboot():
  os.system("sudo reboot now")

def shutdown():
  os.system("sudo shutdown -h now")

def pass_func():
  pass

if __name__ == '__main__':
  global logger
  logger = init_logging()
  while True:
    button_check()
    time.sleep(0.01)
