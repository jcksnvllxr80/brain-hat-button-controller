#!/usr/bin/python

import time
import yaml
import logging
from threading import Thread
from picamera import PiCamera
from flask_cors import CORS
from flask import request, jsonify, Flask # package for the webapp

camera = PiCamera()
app = Flask(__name__)
camera.start_preview()
photo_effects = [ 'none', 'negative', 'solarize', 'sketch', 'denoise', 'emboss', 'oilpaint', 'hatch', 'gpen', 'pastel', 
  'watercolor', 'film', 'blur', 'saturation', 'colorswap', 'washedout', 'posterise', 'colorpoint', 
  'colorbalance', 'cartoon', 'deinterlace1', 'deinterlace2' ]
HOME_DIR = "/home/pi/brain-hat-button-controller/
CONFIG_FILE = HOME_DIR + "conf/application.yaml"
pi_cam_app_settings = {}

def init_logging():
  logging_logger = logging.getLogger(__name__)
  logging_logger.setLevel(logging.DEBUG)
  logging_logger.propagate = False
  # create console handler and set level to info
  handler = logging.StreamHandler()
  handler.setLevel(logging.INFO)
  formatter = logging.Formatter("%(asctime)s [pi_cam_app] [%(levelname)-5.5s]  %(message)s")
  handler.setFormatter(formatter)
  logging_logger.addHandler(handler)
  return logging_logger

def setup():
  config_file = read_config_file()
  # read config dict's into more specific variables
  pi_cam_app_settings = {k: v for k, v in config_file['pi_cam_app'].iteritems()}

def init_web_app():
  CORS(app)
  app.config["DEBUG"] = True
  logger.info("Starting pi_cam_app on ip:port --> " + web_app_ip + ':' + str(web_app_port))
  app.run(host=pi_cam_app_settings['ip'], port=int(pi_cam_app_settings['port']), use_reloader=False)

@app.route('/')
def hello():
  return 'Hello, from pi_cam_app!'

@app.route('/photo_effect_next/<current_effect>/<direction>', methods=['GET'])
def next_photo_effect(current_effect, direction):
  message = handle_next_effect_request(current_effect, direction)
  return jsonify(display_message=message)

@app.route('/help', methods=['GET'])
def help_request():
  message = "This is the help message."
  logger.info(message)
  return jsonify(display_message=message)

@app.errorhandler(404)
def page_not_found(e):
  logger.error("404: The resource could not be found.")
  return jsonify(display_message="Error.")

def handle_next_effect_request(current_effect, direction):
  if direction in ['left', 'right']:
    go_to_next_effect(current_effect, direction)
  else:
    logger.warn("No action taken for invalid direction: " + direction)

def go_to_next_effect(current_effect, dir):
  current_effect_ind = photo_effects.index(current_effect)
  if dir == 'left':
    if current_effect_ind == 0:
      next_effect = photo_effects[len(photo_effects) - 1]
    else:
      next_effect = photo_effects[current_effect_ind - 1]
  else:
    if current_effect_ind == len(photo_effects) - 1:
      next_effect = photo_effects[0]
    else:
      next_effect = photo_effects[current_effect_ind + 1]
  current_effect = next_effect
  set_photo_effect(next_effect)
  msg = next_effect
  logger.info("Changed effect to the next one to the " + dir + ", " + msg)
  return msg

def set_photo_effect(effect):
  camera.image_effect = effect
  x = Thread(target=set_image_text, args=('set_image_text', 3, effect))
  x.start()

def set_image_text(thread_name, wait_seconds, effect_name):
  logger.info("Thread \'%s\': starting", thread_name)
  camera.annotate_text = "Effect: %s" % effect_name
  time.sleep(wait_seconds)
  camera.annotate_text = ''
  logger.info("Thread \'%s\': finishing", thread_name)

if __name__ == '__main__':
  global logger
  logger = init_logging()
  setup()
  init_web_app()
  while True:
    time.sleep(0.01)
