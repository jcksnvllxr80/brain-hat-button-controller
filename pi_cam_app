#!/usr/bin/python

import time
import sys
import yaml
import logging
from traceback import format_exception
from threading import Thread
from picamera import PiCamera
from flask_cors import CORS
from flask import request, jsonify, Flask # package for the webapp

camera = PiCamera()
app = Flask(__name__)
menu_items = ['photo_effect' , 'resolution']
photo_effects = [ 'none', 'negative', 'solarize', 'sketch', 'denoise', 'emboss', 'oilpaint', 'hatch', 'gpen', 'pastel', 
  'watercolor', 'film', 'blur', 'saturation', 'colorswap', 'washedout', 'posterise', 'colorpoint', 
  'colorbalance', 'cartoon', 'deinterlace1', 'deinterlace2' ]
resolutions = [(2028, 1080), (2028, 1520), (4056, 3040), (1332, 990)]
HOME_DIR = "/home/pi/"
IMAGES_DIR = HOME_DIR + "Pictures/"
VIDEO_DIR = HOME_DIR + "Videos/"
STOPMOTION_DIR = HOME_DIR + "stopmotion/"
APP_DIR = HOME_DIR + "brain-hat-button-controller/"
CONFIG_FILE = APP_DIR + "conf/application.yaml"
pi_cam_app_settings = {}
current_menu_item = 'photo_effect'

def init_logging():
  logging_logger = logging.getLogger(__name__)
  logging_logger.setLevel(logging.DEBUG)
  logging_logger.propagate = False
  # create console handler and set level to info
  handler = logging.StreamHandler()
  handler.setLevel(logging.DEBUG)
  formatter = logging.Formatter("%(asctime)s [pi_cam_app] [%(levelname)-5.5s]  %(message)s")
  handler.setFormatter(formatter)
  logging_logger.addHandler(handler)
  return logging_logger

def setup():
  global pi_cam_app_settings
  config_file = read_config_file()
  # read config dict's into more specific variables
  pi_cam_app_settings = {k: v for k, v in config_file['pi_cam_app'].items()}

def init_web_app():
  web_app_ip = pi_cam_app_settings['ip']
  web_app_port = pi_cam_app_settings['port']
  CORS(app)
  app.config["DEBUG"] = True
  logger.info("Starting pi_cam_app on ip:port --> " + web_app_ip + ':' + str(web_app_port))
  app.run(host=web_app_ip, port=int(web_app_port), use_reloader=False)

def read_config_file():
  # read config yaml file into dictionaries
  config_file = None
  with open(CONFIG_FILE, 'r') as ymlfile:
    config_file = yaml.full_load(ymlfile)
  return config_file

@app.route('/')
def hello():
  return 'Hello, from pi_cam_app!'

@app.route('/pi_cam_preview/<action>', methods=['GET'])
def pi_cam_preview_request(action):
  return handle_pi_cam_preview_request(action)

@app.route('/is_previewing', methods=['GET'])
def is_previewing_request():
  return handle_is_previewing_request()

@app.route('/take_photo/<filename>', methods=['GET'])
def take_photo_request(filename):
  message = handle_take_photo_request(filename)
  logger.info(message)
  return message

@app.route('/next_menu_item/<direction>', methods=['GET'])
def next_value(direction):
  message = handle_next_menu_item_request(direction)
  logger.info(message)
  return message

@app.route('/next_value/<direction>', methods=['GET'])
def next_value(direction):
  message = handle_next_value_request(direction)
  logger.info(message)
  return message

@app.route('/help', methods=['GET'])
def help_request():
  message = "This is the help message."
  logger.info(message)
  return jsonify(display_message=message)

@app.errorhandler(404)
def page_not_found(e):
  logger.error("404: The resource could not be found.")
  return jsonify(display_message="Error.")

def handle_is_previewing_request():
  preview = camera.previewing
  message = "Camera in preview: {0}".format(preview)
  logger.info(message)
  return str(preview)

def handle_pi_cam_preview_request(action):
  global camera
  if action == "start":
    if camera.closed:
      camera = PiCamera()
    set_resolution(4056, 3040)
    camera.start_preview()
    camera.preview_fullscreen = True
    msg = "Started pi cam preview."
  else:
    camera.stop_preview()
    camera.close()
    msg = "Stopped and closed pi cam preview."
  logger.info(msg)
  return msg

def handle_take_photo_request(filename):
  filepath = "{0}{1}".format(IMAGES_DIR, filename)
  try:
    shoot(filepath)
    message = "{0} written successfully!".format(filepath)
  except:
    exc_type, exc_value, exc_tb = sys.exc_info()
    exception_handler(exc_type, exc_value, exc_tb)
    message = "{0} not successfully written!".format(filepath)
  return message

def shoot(filepath):
  camera.capture(filepath, format='png')

def set_resolution(x, y, fps=None):
  camera.resolution = (x, y)
  if fps:
    camera.framerate = fps

def handle_next_menu_item_request(direction):
  if direction in ['up', 'down']:
    msg = go_to_next_menu_item(direction)
  else:
    msg = "No action taken for invalid direction: " + direction
    logger.warning(msg)
  return msg

def handle_next_value_request(direction):
  if direction in ['left', 'right']:
    msg = go_to_next_value(direction)
  else:
    msg = "No action taken for invalid direction: " + direction
    logger.warning(msg)
  return msg

def go_to_next_menu_item(dir):
  global current_menu_item
  current_menu_item_ind = menu_items.index(menu_items[current_menu_item])
  if dir == 'down':
    if current_menu_item_ind == 0:
      next_menu_item = menu_items[len(menu_items) - 1]
    else:
      next_menu_item = menu_items[current_menu_item_ind - 1]
  else:
    if current_menu_item_ind == len(menu_items) - 1:
      next_menu_item = menu_items[0]
    else:
      next_menu_item = menu_items[current_menu_item_ind + 1]
  current_menu_item = next_menu_item
  msg = "Changed menu item {0} one to \'{1}\'".format(dir, next_menu_item)
  logger.info(msg)
  return msg

def go_to_next_value(dir):
  global current_values
  current_menu_item_list = current_menu_items[current_menu_item]
  current_value_ind = current_menu_item_list.index(current_values[current_menu_item])
  if dir == 'left':
    if current_value_ind == 0:
      next_value = current_menu_item_list[len(current_menu_item_list) - 1]
    else:
      next_value = current_menu_item_list[current_value_ind - 1]
  else:
    if current_value_ind == len(current_menu_item_list) - 1:
      next_value = current_menu_item_list[0]
    else:
      next_value = current_menu_item_list[current_value_ind + 1]
  current_values[current_menu_item] = next_value
  current_menu_functions[current_menu_item](next_value)
  msg = "Changed value one to the {0}, \'{1}\'".format(dir, next_value)
  logger.info(msg)
  return msg

def set_photo_effect(effect):
  camera.image_effect = effect
  x = Thread(target=set_image_text, args=('set_image_text', 3, 'Effect', effect))
  x.start()

def set_menu_resolution(resolution):
  set_resolution(*resolution)  # resolution is a tuple so gather and spit out its values
  x = Thread(target=set_image_text, args=('set_image_text', 3, 'Effect', effect))
  x.start()

def set_image_text(thread_name, wait_seconds, display_str, value_name):
  logger.info("Thread \'{0}\': starting".format(thread_name))
  desired_res = int(0.07 * min(current_values['resolution']))
  camera.annotate_text_size = desired_res if desired_res < 160 else 160
  camera.annotate_text = "{0}: {1}".format(display_str, value_name)
  time.sleep(wait_seconds)
  camera.annotate_text = ''
  logger.info("Thread \'{0}\': finishing".format(thread_name))

def exception_handler(exc_type, exc_value, exc_tb):
  err_str = str(format_exception(exc_type, exc_value, exc_tb))
  error_log = "An exception was encountered: " + err_str
  logger.error(error_log)

if __name__ == '__main__':
  global logger
  global current_values
  global current_menu_items
  global current_menu_functions
  logger = init_logging()
  current_values = {
    'photo_effect': 'none',
    'resolution': (4056, 3040)
  }
  current_menu_items = {
    'photo_effect': photo_effects,
    'resolution': resolutions
  }
  current_menu_functions = {
    'photo_effect': set_photo_effect,
    'resolution': set_resolution
  }
  setup()
  init_web_app()
  while True:
    time.sleep(0.01)
