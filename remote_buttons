#!/usr/bin/python3

import time
import yaml
from CameraButtons import CameraButtons
import logging
from datetime import datetime
from flask_cors import CORS
import tkinter as tk
from tkinter import messagebox
from flask import jsonify, Flask # package for the webapp

app = Flask(__name__)
camera_buttons = CameraButtons.CameraButtons()
remote_buttons_settings = {}
HOME_DIR = "/home/pi/brain-hat-button-controller/"
CONFIG_FILE = HOME_DIR + "conf/remote_buttons.yaml"

def init_logging():
  logging_logger = logging.getLogger(__name__)
  logging_logger.setLevel(logging.DEBUG)
  logging_logger.propagate = False
  # create console handler and set level to info
  handler = logging.StreamHandler()
  handler.setLevel(logging.DEBUG)
  formatter = logging.Formatter("%(asctime)s [remote_buttons] [%(levelname)-5.5s]  %(message)s")
  handler.setFormatter(formatter)
  logging_logger.addHandler(handler)
  return logging_logger

def init_web_app():
  web_app_ip = remote_buttons_settings['ip']
  web_app_port = remote_buttons_settings['port']
  CORS(app)
  app.config["DEBUG"] = True
  logger.info("Starting remote_buttons on ip:port --> " + web_app_ip + ':' + str(web_app_port))
  app.run(host=web_app_ip, port=int(web_app_port), use_reloader=False)

def config():
  global remote_buttons_settings
  config_file = read_config_file()
  # read config dict's into more specific variables
  remote_buttons_settings = {k: v for k, v in config_file['buttons'].items()}

def read_config_file():
  # read config yaml file into dictionaries
  config_file = None
  with open(CONFIG_FILE, 'r') as ymlfile:
    config_file = yaml.full_load(ymlfile)
  return config_file

@app.route('/')
def hello():
  return 'Hello, from remote_buttons!'

@app.route('/button_press/<button>/<duration>', methods=['GET'])
def short_press(button, duration):
  logger.debug("Got request for button_press function with button: {0}, duration: {1}.".format(button, duration))
  return handle_button_press(button, duration)

@app.route('/help', methods=['GET'])
def help_request():
  message = "This is the help message."
  logger.info(message)
  return jsonify(display_message=message)

@app.errorhandler(404)
def page_not_found(e):
  logger.error("404: The resource could not be found.")
  return jsonify(display_message="Error.")

def handle_button_press(bttn, press_type):
  if bttn == "photo":
    message = handle_photo_press(was_long_press(press_type))
  elif bttn == "up":
    message = handle_up_press(was_long_press(press_type))
  elif bttn == "down":
    message = handle_down_press(was_long_press(press_type))
  elif bttn == "left":
    message = handle_left_press(was_long_press(press_type))
  elif bttn == "right":
    message = handle_right_press(was_long_press(press_type))
  elif bttn == "select":
    message = handle_select_press(was_long_press(press_type))
  else:
    message = "No button named {0}".format(bttn)
    logger.warn(message)
  return message

def handle_photo_press(long_press):
  return camera_buttons.photo_handler(long_press)

def handle_up_press(long_press):
  return camera_buttons.up_handler(long_press)

def handle_down_press(long_press):
  return camera_buttons.down_handler(long_press)

def handle_left_press(long_press):
  return camera_buttons.left_handler(long_press)

def handle_right_press(long_press):
  return camera_buttons.right_handler(long_press)

def handle_select_press(long_press):
  return camera_buttons.select_handler(long_press)

def was_long_press(press_length):
  if press_length == "long":
    logger.debug("Received longpress")
    return True
  else:
    logger.debug("Did NOT receive longpress")
    return False

# initialise main window
def init(win):
  win.title("Pi Camera Button Gui")
  win.minsize(800, 480)
  select_btn.pack()
  photo_btn.pack()
  up_btn.pack()
  down_btn.pack()
  left_btn.pack()
  right_btn.pack()
  menu_btn.pack()
  text_area.pack()
  close_btn.pack()

# button callbacks
def photo():
  handle_photo_press(photo_btn.long_press)

def select():
  handle_select_press(select_btn.long_press)

def up():
  handle_up_press(up_btn.long_press)

def down():
  handle_down_press(down_btn.long_press)

def left():
  handle_left_press(left_btn.long_press)

def right():
  handle_right_press(right_btn.long_press)

def menu():
  # handle_menu_press(menu_btn.long_press)
  pass

class button_with_timer(tk.Button):

  def __init__(self, container, text, command, width, height):
    self.container = container
    self.name = text
    tk.Button.__init__(self, self.container, text=text, command=command, width=width, height=height)
    self.bind("<ButtonPress>", self.on_press)
    self.bind("<ButtonRelease>", self.on_release)
    self.button_press_time = 0
    self.button_release_time = 0
    self.long_press = False

  def on_press(self, button):
    self.button_press_time = time.time()
    # self.log("button was pressed at {0}".format(self.button_press_time))

  def on_release(self, button):
    self.button_release_time = time.time()
    # self.log("button was released at {0}".format(self.button_release_time))
    delta = self.button_release_time - self.button_press_time
    if delta > 0.75:
      self.long_press = True
    else:
      self.long_press = False 
    print("{}".format("delta: {0:.2f}; press: {1}".format(delta, "long" if self.long_press else "short")))
    self.log("\ndelta:\n{0:.2f}\npress:\n{1}".format(delta, "long" if self.long_press else "short"))

  def log(self, message):
    now = time.strftime("%I:%M:%S", time.localtime())
    text_area.delete('1.0', tk.END)
    text_area.insert("end", "{}\n{}".format(now, message.strip()))
    text_area.see("end")

# create top-level window
win = tk.Tk()
win.wm_attributes('-type', 'splash')
win.attributes('-alpha',0.5)
left_button_frame = tk.Frame(win)
left_button_frame.pack(fill=tk.X, side=tk.LEFT)
right_button_frame = tk.Frame(win)
right_button_frame.pack(fill=tk.X, side=tk.RIGHT)

positionRight = 0
positionDown = 0
win.geometry("+{}+{}".format(positionRight, positionDown))

text_area = tk.Text(right_button_frame, height=10, width=8)
close_btn = tk.Button(left_button_frame, text='close', command=win.quit, width=8, height=3)
select_btn = button_with_timer(right_button_frame, text="select", command=select, width=8, height=3)
photo_btn = button_with_timer(right_button_frame, text="photo", command=photo, width=8, height=3)
up_btn = button_with_timer(left_button_frame, text="up", command=up, width=8, height=3)
down_btn = button_with_timer(left_button_frame, text="down", command=down, width=8, height=3)
left_btn = button_with_timer(left_button_frame, text="left", command=left, width=8, height=3)
right_btn = button_with_timer(left_button_frame, text="right", command=right, width=8, height=3)
menu_btn = button_with_timer(right_button_frame, text="menu", command=menu, width=8, height=3)

if __name__ == '__main__':
  global logger
  logger = init_logging()
  config()
  init(win)
  tk.mainloop()
  init_web_app()
  while True:
    time.sleep(0.01)
